# Location: .github/workflows/evaluate-coderabbit-review.yml

name: 'Evaluate CodeRabbit Review'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]
  pull_request_review_comment:
    types: [created, deleted]

jobs:
  evaluate_codereview:
    if: |
      (github.event_name == 'pull_request_review' && github.event.sender.login == 'coderabbitai[bot]') ||
      (github.event_name == 'pull_request' && github.event.action != 'closed') ||
      (github.event_name == 'pull_request_review_comment' && github.event.sender.login != 'github-actions[bot]')
    env:
      PR_NUMBER: ${{ github.event.pull_request.number || github.event.issue.number }}
      HEAD_SHA: ${{ github.event.pull_request.head.sha }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      COMMENT_MARKER: ""
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      statuses: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Evaluate Unresolved Comments and Generate Summary
        id: evaluate
        run: |
          graphql_query='
            query($owner: String!, $name: String!, $prNumber: Int!) {
              repository(owner: $owner, name: $name) {
                pullRequest(number: $prNumber) {
                  reviewThreads(first: 100) {
                    nodes {
                      isResolved
                      comments(first: 20) {
                        nodes {
                          author { login }
                          body
                          url
                        }
                      }
                    }
                  }
                }
              }
            }'

          # Get all unresolved comments from coderabbitai[bot]
          unresolved_comments_json=$(gh api graphql -f query="$graphql_query" -f owner="${{ github.repository_owner }}" -f name="${{ github.event.repository.name }}" -F prNumber="$PR_NUMBER" \
            --jq '[.data.repository.pullRequest.reviewThreads.nodes[] | select(.isResolved == false) | .comments.nodes[] | select(.author.login == "coderabbitai[bot]")]')

          # Count specific types of unresolved comments
          potential_issue_count=$(echo "$unresolved_comments_json" | jq '[.[] | select(.body | contains("_‚ö†Ô∏è Potential issue_"))] | length')
          refactor_suggestion_count=$(echo "$unresolved_comments_json" | jq '[.[] | select(.body | contains("_Refactor suggestion_"))] | length')
          total_unresolved_count=$(echo "$unresolved_comments_json" | jq 'length')
          total_suggestions=$((potential_issue_count + refactor_suggestion_count))

          echo "Unresolved Potential Issues: $potential_issue_count"
          echo "Unresolved Refactor Suggestions: $refactor_suggestion_count"
          echo "Total Unresolved CodeRabbit Comments: $total_unresolved_count"

          echo "potential_issue_count=$potential_issue_count" >> $GITHUB_OUTPUT
          echo "total_suggestions=$total_suggestions" >> $GITHUB_OUTPUT
          echo "total_unresolved_count=$total_unresolved_count" >> $GITHUB_OUTPUT

          # --- Build Summary Comment Body ---
          SUMMARY_BODY="${{ env.COMMENT_MARKER }}\n\n### üîç CodeRabbit Analysis\n\n"
          if [ "$total_unresolved_count" -gt 0 ]; then
            SUMMARY_BODY="${SUMMARY_BODY}**<font color='red'>Found $total_unresolved_count unresolved comment(s).</font>**\n\n"
            SUMMARY_BODY="${SUMMARY_BODY}| Type | Details | Link |\n"
            SUMMARY_BODY="${SUMMARY_BODY}|:---|:---|:---|\n"
            table_rows=$(echo "$unresolved_comments_json" | jq -r '.[] | "| `\(if (.body | contains("_‚ö†Ô∏è Potential issue_")) then "Issue" else "Refactor" end)` | `\(.body | split("\n")[0])` | [View](\(.url)) |"')
            SUMMARY_BODY="${SUMMARY_BODY}${table_rows}"
          else
            SUMMARY_BODY="${SUMMARY_BODY}**<font color='green'>Excellent!</font>** All CodeRabbit comments have been resolved.\n"
          fi

          # --- Determine Approval Status ---
          SUMMARY_BODY="${SUMMARY_BODY}\n\n---\n"
          if [ "$total_unresolved_count" -gt 0 ] || [ "$potential_issue_count" -gt 1 ] || [ "$total_suggestions" -gt 4 ]; then
            SUMMARY_BODY="${SUMMARY_BODY}**<font color='red'>‚ùå Status: Changes Requested.</font>**\n"
            SUMMARY_BODY="${SUMMARY_BODY}- Total unresolved comments: **$total_unresolved_count** (Required: 0)\n"
            SUMMARY_BODY="${SUMMARY_BODY}- Unresolved 'Potential Issues': **$potential_issue_count** (Required: ‚â§ 1)\n"
            SUMMARY_BODY="${SUMMARY_BODY}- Total 'Issues' + 'Refactors': **$total_suggestions** (Required: ‚â§ 4)"
          else
            SUMMARY_BODY="${SUMMARY_BODY}**<font color='green'>‚úÖ Status: Approved.</font>** All quality gates passed."
          fi

          echo "summary_body<<EOF" >> $GITHUB_OUTPUT
          echo -e "$SUMMARY_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create or Update Summary Comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ env.PR_NUMBER }}
          body: ${{ steps.evaluate.outputs.summary_body }}
          edit-mode: replace

      - name: Approve or Request Changes based on Evaluation
        run: |
          total_unresolved=${{ steps.evaluate.outputs.total_unresolved_count }}
          potential_issues=${{ steps.evaluate.outputs.potential_issue_count }}
          total_suggestions=${{ steps.evaluate.outputs.total_suggestions }}

          if [ "$total_unresolved" -gt 0 ] || [ "$potential_issues" -gt 1 ] || [ "$total_suggestions" -gt 4 ]; then
            echo "Requesting changes because quality gates were not met."
            gh pr review $PR_NUMBER --request-changes --body "Action: Changes requested. See summary comment for details."
            gh pr edit $PR_NUMBER --remove-label "READY TO MERGE" || true
          else
            echo "All quality gates passed. Checking for existing approval."

            # Dismiss previous "CHANGES_REQUESTED" review if it exists, before approving.
            EXISTING_REVIEW_ID=$(gh pr view $PR_NUMBER --json reviews --jq '.reviews[] | select(.author.login == "github-actions[bot]" and .state == "CHANGES_REQUESTED") | .id' | tail -n 1)
            if [ -n "$EXISTING_REVIEW_ID" ]; then
              echo "Dismissing previous 'Changes Requested' review (ID: $EXISTING_REVIEW_ID)."
              gh api \
                --method PUT \
                /repos/${{ github.repository }}/pulls/$PR_NUMBER/reviews/$EXISTING_REVIEW_ID/dismissals \
                -f message="Previous issues have been addressed."
            fi

            echo "Submitting approval."
            gh pr review $PR_NUMBER --approve --body "Action: Approved. All code review conditions are met."
            gh pr edit $PR_NUMBER --add-label "READY TO MERGE"
          fi

      - name: Report Final Status Check
        if: always()
        run: |
          total_unresolved=${{ steps.evaluate.outputs.total_unresolved_count }}
          potential_issues=${{ steps.evaluate.outputs.potential_issue_count }}
          total_suggestions=${{ steps.evaluate.outputs.total_suggestions }}

          if [ "$total_unresolved" -gt 0 ] || [ "$potential_issues" -gt 1 ] || [ "$total_suggestions" -gt 4 ]; then
            STATE='failure'
            DESC="Failed: $total_unresolved unresolved comment(s) exist or thresholds exceeded."
          else
            STATE='success'
            DESC='Success: All code review quality gates passed.'
          fi

          gh api \
            --method POST \
            /repos/${{ github.repository }}/statuses/$HEAD_SHA \
            -f state="$STATE" \
            -f description="$DESC" \
            -f context='Code Review Quality Gate'
# V·ªã tr√≠: .github/workflows/evaluate-coderabbit-review.yml
name: Evaluate CodeRabbit Review

on:
  # X√≥a b·ªè trigger "pull_request: synchronize" kh·ªèi ƒë√¢y
  pull_request_review:
    types: [submitted]
  pull_request_review_comment:
    types: [created, resolved]
  issue_comment:
    types: [created]

jobs:
  evaluate_codereview:
    # ƒêi·ªÅu ki·ªán c≈©ng ƒë∆∞·ª£c r√∫t g·ªçn, kh√¥ng c√≤n ki·ªÉm tra s·ª± ki·ªán "synchronize" n·ªØa
    if: |
      github.event.sender.login != 'github-actions[bot]' && (
        (github.event_name == 'pull_request_review' && github.event.review.user.login == 'coderabbitai[bot]') ||
        (github.event_name == 'pull_request_review_comment' && github.event.comment.user.login == 'coderabbitai[bot]') ||
        (github.event_name == 'issue_comment' && github.event.issue.pull_request && github.event.comment.user.login == 'coderabbitai[bot]')
      )
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      statuses: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # C√°c b∆∞·ªõc c√≤n l·∫°i kh√¥ng thay ƒë·ªïi logic
      - name: Generate Summary from Unresolved Comments
        id: generate_summary
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number || github.event.issue.number }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          graphql_query='
            query($owner: String!, $name: String!, $prNumber: Int!) {
              repository(owner: $owner, name: $name) {
                pullRequest(number: $prNumber) {
                  reviewThreads(first: 100) {
                    nodes {
                      isResolved
                      comments(first: 20) {
                        nodes {
                          author { login }
                          body
                          url
                        }
                      }
                    }
                  }
                }
              }
            }'
          issues_json=$(gh api graphql -f query="$graphql_query" -f owner="$REPO_OWNER" -f name="$REPO_NAME" -F prNumber="$PR_NUMBER" \
            --jq '[.data.repository.pullRequest.reviewThreads.nodes[] | select(.isResolved == false) | .comments.nodes[] | select(.author.login == "coderabbitai" and (.body | contains("_‚ö†Ô∏è Potential issue_")))]')
          issue_count=$(echo "$issues_json" | jq 'length')
          echo "Final issue count is: $issue_count"
          echo "issue_count=$issue_count" >> $GITHUB_OUTPUT
          SUMMARY_BODY="### üîç Ph√¢n t√≠ch t·ª´ CodeRabbit\n\n"
          if [ "$issue_count" -gt 0 ]; then
            SUMMARY_BODY="${SUMMARY_BODY}**<font color='red'> t√¨m th·∫•y $issue_count 'Potential issue' ch∆∞a ƒë∆∞·ª£c gi·∫£i quy·∫øt.</font>** C·∫ßn ph·∫£i x·ª≠ l√Ω tr∆∞·ªõc khi merge.\n\n"
            SUMMARY_BODY="${SUMMARY_BODY}| V·∫•n ƒë·ªÅ ƒë∆∞·ª£c ph√°t hi·ªán | Xem chi ti·∫øt |\n"
            SUMMARY_BODY="${SUMMARY_BODY}| --- | --- |\n"
            table_rows=$(echo "$issues_json" | jq -r '.[] | "| `\(.body | split("\n")[0])` | [Link t·ªõi comment](\(.url)) |"')
            SUMMARY_BODY="${SUMMARY_BODY}${table_rows}"
          else
            SUMMARY_BODY="${SUMMARY_BODY}**<font color='green'> Tuy·ªát v·ªùi!</font>** T·∫•t c·∫£ 'Potential issue' ƒë√£ ƒë∆∞·ª£c gi·∫£i quy·∫øt.\n"
          fi
          SUMMARY_BODY="${SUMMARY_BODY}\n\n---\n"
          if [ "$issue_count" -gt 3 ]; then
            SUMMARY_BODY="${SUMMARY_BODY}**<font color='orange'>‚ö†Ô∏è Tr·∫°ng th√°i: Y√™u c·∫ßu thay ƒë·ªïi.</font>** S·ªë l∆∞·ª£ng 'Potential issue' (${issue_count}) v∆∞·ª£t qu√° ng∆∞·ª°ng cho ph√©p (3)."
          else
            SUMMARY_BODY="${SUMMARY_BODY}**<font color='green'>‚úÖ Tr·∫°ng th√°i: Ph√™ duy·ªát.</font>** T·∫•t c·∫£ 'Potential issue' ƒë√£ n·∫±m trong ng∆∞·ª°ng cho ph√©p (${issue_count} <= 3). S·∫µn s√†ng ƒë·ªÉ merge!"
          fi
          SUMMARY_BODY="${SUMMARY_BODY}\n\n*B·∫£ng n√†y ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª± ƒë·ªông b·ªüi GitHub Actions.*"
          echo "summary_body<<EOF" >> $GITHUB_OUTPUT
          echo -e "$SUMMARY_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create or Update Summary Comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number || github.event.issue.number }}
          body: ${{ steps.generate_summary.outputs.summary_body }}
          edit-mode: replace

      - name: Approve or Request Changes based on Issue Count
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number || github.event.issue.number }}
        run: |
          if [ "${{ steps.generate_summary.outputs.issue_count }}" -gt 3 ]; then
            echo "Requesting changes because issue count is ${{ steps.generate_summary.outputs.issue_count }}."
            gh pr review $PR_NUMBER --request-changes --body "Action: Y√™u c·∫ßu thay ƒë·ªïi. Chi ti·∫øt xem trong comment t√≥m t·∫Øt."
            gh pr edit $PR_NUMBER --remove-label "READY TO MERGE" || true
          else
            echo "Approving because issue count is ${{ steps.generate_summary.outputs.issue_count }}."
            EXISTING_REVIEW_ID=$(gh pr view $PR_NUMBER --json reviews --jq '.reviews[] | select(.author.login == "github-actions[bot]" and .state == "CHANGES_REQUESTED") | .id' | tail -n 1)
            if [ -n "$EXISTING_REVIEW_ID" ]; then
              echo "Dismissing previous 'Changes Requested' review (ID: $EXISTING_REVIEW_ID)."
              gh pr review --dismiss "$EXISTING_REVIEW_ID" --body "C√°c v·∫•n ƒë·ªÅ tr∆∞·ªõc ƒë√≥ ƒë√£ ƒë∆∞·ª£c gi·∫£i quy·∫øt."
            fi
            gh pr review $PR_NUMBER --approve --body "Action: Ph√™ duy·ªát. S·∫µn s√†ng ƒë·ªÉ merge!"
            gh pr edit $PR_NUMBER --add-label "READY TO MERGE"
          fi

      - name: Report success status to unblock PR
        if: always()
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          CURRENT_SHA=${{ github.event.pull_request.head.sha }}
          if [ -z "$CURRENT_SHA" ]; then
            CURRENT_SHA=$(gh api /repos/${{ github.repository }}/pulls/${{ github.event.issue.number }} --jq '.head.sha')
          fi
          gh api \
            --method POST \            
            /repos/${{ github.repository }}/statuses/$CURRENT_SHA \
            -f state='success' \
            -f description='Evaluation complete!' \
            -f context='Code Analysis Result'
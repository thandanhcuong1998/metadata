# File: .github/workflows/coderabbit-pro.yml

name: CodeRabbit Pro – Policy Gate

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  
  issue_comment:
    types: [created]
    if: github.event.sender.type != 'Bot'

permissions:
  contents: read
  pull-requests: write
  issues: write 

jobs:
  gate:
    name: Enforce Code Review Policy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Initial delay for Coderabbit to start
        if: github.event_name == 'pull_request'
        run: sleep 30
      
      - name: Wait for Coderabbit review to complete
        if: github.event_name == 'pull_request'
        uses: lewagon/wait-on-check-action@v1.3.3
        with:
          # QUAN TRỌNG: Tên của status check mà Coderabbit App tạo ra.
          # Hãy kiểm tra tên chính xác trên PR của bạn (ví dụ: 'Coderabbit', 'CodeRabbit').
          check-name: 'CodeRabbit' 
          
          ref: ${{ github.event.pull_request.head.sha }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 20

      - name: Evaluate CodeRabbit findings
        id: evaluate
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const pr_number = context.issue.number;
            if (!pr_number) {
              core.setFailed('Could not get PR number from context.');
              return;
            }
            const [reviewComments, issueComments] = await Promise.all([
              github.paginate(github.rest.pulls.listReviewComments, { owner, repo, pull_number: pr_number, per_page: 100 }),
              github.paginate(github.rest.issues.listComments, { owner, repo, issue_number: pr_number, per_page: 100 }),
            ]);
            const allComments = [...reviewComments, ...issueComments];
            
            const searchTerm = '⚠️ Potential issue';
            let potential_issues = 0;
            for (const c of allComments) {
              if (c.user?.type === 'Bot' && c.body?.includes(searchTerm)) {
                potential_issues++;
              }
            }
            core.info(`Found: ${potential_issues} potential issues.`);
            core.setOutput('potential_issues', String(potential_issues));

            if (potential_issues > 3) {
              core.setFailed(`Policy failed: Found ${potential_issues} 'Potential issue' comments (threshold is >3).`);
            }

      - name: Update Summary Comment
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.issue.number;
            const potential_issues = '${{ steps.evaluate.outputs.potential_issues }}';
            const conclusion = '${{ job.status }}';
            const signature = '';
            const body = `### 🛡️ Code Review Policy Gate\n\n` + `${signature}\n\n` + `**Result:** ${conclusion === 'success' ? '✅ Passed' : '❌ Failed'}\n\n` + `| Criterion | Count | Threshold |\n` + `|---|---|---|\n` + `| ⚠️ Potential Issues | **${potential_issues}** | Must be ≤ 3 |\n\n` + `*This check re-runs automatically when new comments are added.*`;
            const comments = await github.paginate(github.rest.issues.listComments, { owner, repo, issue_number: pr_number });
            const botComment = comments.find(comment => comment.user.type === 'Bot' && comment.body.includes(signature));
            if (botComment) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: botComment.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number: pr_number, body });
            }

      - name: Add "READY TO MERGE" label
        if: success() && steps.evaluate.outputs.potential_issues == '0'
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const pr_number = context.issue.number;
            const label_to_add = "READY TO MERGE";

            core.info(`Adding label '${label_to_add}' to PR #${pr_number}`);
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: pr_number,
              labels: [label_to_add]
            });

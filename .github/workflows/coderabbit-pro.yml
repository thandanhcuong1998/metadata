# File: .github/workflows/coderabbit-pro.yml

name: CodeRabbit Pro ‚Äì Policy Gate

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write

jobs:
  gate:
    name: Enforce Code Review Policy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # ƒê√£ lo·∫°i b·ªè b∆∞·ªõc ki·ªÉm tra styleguide.md

      # T·∫°m d·ª´ng m·ªôt ch√∫t ƒë·ªÉ Coderabbit App c√≥ th·ªùi gian ƒëƒÉng b√¨nh lu·∫≠n
      - name: Small delay (let bot comment)
        run: sleep 15 # TƒÉng th·ªùi gian ch·ªù l√™n 15 gi√¢y ƒë·ªÉ ch·∫Øc ch·∫Øn h∆°n

      # L·∫•y v√† ƒë·∫øm c√°c b√¨nh lu·∫≠n c√≥ tag [critical], [high], [medium]
      - name: Evaluate CodeRabbit findings
        id: evaluate
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const pr = context.payload.pull_request?.number;
            if (!pr) {
              core.setFailed('No pull_request in context.');
              return;
            }

            const [reviewComments, issueComments] = await Promise.all([
              github.paginate(github.rest.pulls.listReviewComments, { owner, repo, pull_number: pr, per_page: 100 }),
              github.paginate(github.rest.issues.listComments, { owner, repo, issue_number: pr, per_page: 100 }),
            ]);

            const TAG = /^\s*\[(critical|high|medium)\]/i;
            const isFromBotOrTagged = c =>
              (c.user?.type === 'Bot' || c.user?.login?.endsWith('[bot]')) ||
              TAG.test(c.body || '');

            const comments = [...reviewComments, ...issueComments].filter(isFromBotOrTagged);

            let critical = 0, high = 0, medium = 0;
            for (const c of comments) {
              const m = (c.body || '').match(TAG);
              if (!m) continue;
              const lvl = m[1].toLowerCase();
              if (lvl === 'critical') critical++;
              else if (lvl === 'high') high++;
              else if (lvl === 'medium') medium++;
            }

            core.info(`Found: critical=${critical}, high=${high}, medium=${medium}`);
            core.setOutput('critical', String(critical));
            core.setOutput('high', String(high));
            core.setOutput('medium', String(medium));

            // Quy t·∫Øc Fail:
            // - Fail n·∫øu (medium > 3) HO·∫∂C (critical + high > 0)
            if (medium > 3 || (critical + high) > 0) {
              core.setFailed(`Policy failed: medium=${medium} (threshold is >3) or critical+high=${critical+high} (threshold is >0)`);
            }

      # (T√πy ch·ªçn) ƒêƒÉng m·ªôt b√¨nh lu·∫≠n t√≥m t·∫Øt v·ªÅ k·∫øt qu·∫£ ki·ªÉm tra
      - name: Comment summary
        if: always() # Lu√¥n ch·∫°y b∆∞·ªõc n√†y, k·ªÉ c·∫£ khi b∆∞·ªõc tr∆∞·ªõc b·ªã fail
        uses: actions/github-script@v7
        with:
          script: |
            // Script n√†y s·∫Ω l·∫•y k·∫øt qu·∫£ t·ª´ b∆∞·ªõc 'evaluate' v√† ƒëƒÉng m·ªôt comment t√≥m t·∫Øt
            const { owner, repo } = context.repo;
            const pr_number = context.issue.number;
            const critical = '${{ steps.evaluate.outputs.critical }}';
            const high = '${{ steps.evaluate.outputs.high }}';
            const medium = '${{ steps.evaluate.outputs.medium }}';
            const conclusion = '${{ job.status }}'; // L·∫•y tr·∫°ng th√°i c·ªßa job (success ho·∫∑c failure)

            const body = `### üõ°Ô∏è Code Review Policy Gate\n\n` +
                         `**Result:** ${conclusion === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}\n\n` +
                         `| Severity | Count | Threshold |\n` +
                         `|---|---|---|\n` +
                         `| Critical | **${critical}** | Must be 0 |\n` +
                         `| High | **${high}** | Must be 0 |\n` +
                         `| Medium | **${medium}** | Must be < 4 |\n\n` +
                         `*This check is performed by the custom Policy Gate workflow.*`;

            await github.rest.issues.createComment({
              owner, repo, issue_number: pr_number, body
            });

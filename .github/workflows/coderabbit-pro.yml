# File: .github/workflows/coderabbit-pro.yml

name: CodeRabbit Pro ‚Äì Policy Gate

# <<< S·ª¨A ƒê·ªîI 1: Thay ƒë·ªïi ho√†n to√†n trigger c·ªßa workflow >>>
# Workflow n√†y s·∫Ω ch·ªâ ch·∫°y KHI m·ªôt status check kh√°c ho√†n th√†nh.
on:
  check_run:
    types: [completed]

permissions:
  contents: read
  pull-requests: read # Ch·ªâ c·∫ßn quy·ªÅn ƒë·ªçc PR
  issues: write # C·∫ßn quy·ªÅn ghi issue ƒë·ªÉ comment v√† th√™m label
  checks: read # C·∫ßn quy·ªÅn ƒë·ªçc check_run

jobs:
  gate:
    # Th√™m ƒëi·ªÅu ki·ªán ƒë·ªÉ job n√†y ch·ªâ ch·∫°y n·∫øu status check ho√†n th√†nh l√† c·ªßa "CodeRabbit"
    if: github.event.check_run.name == 'CodeRabbit'
    name: Enforce Code Review Policy
    runs-on: ubuntu-latest

    steps:
      # <<< S·ª¨A ƒê·ªîI 2: Checkout code c·ªßa commit ƒë√£ ƒë∆∞·ª£c Coderabbit check >>>
      - name: Checkout PR Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.check_run.head_sha }}

      # <<< ƒê√É X√ìA B·ªé HO√ÄN TO√ÄN C√ÅC B∆Ø·ªöC "sleep" v√† "wait-on-check-action" >>>

      - name: Evaluate CodeRabbit findings
        id: evaluate
        uses: actions/github-script@v7
        with:
          script: |
            // <<< S·ª¨A ƒê·ªîI 3: L·∫•y PR number t·ª´ context c·ªßa check_run >>>
            if (context.payload.check_run.pull_requests.length === 0) {
              core.info('This check is not associated with a pull request. Skipping.');
              return;
            }
            const pr_number = context.payload.check_run.pull_requests[0].number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const [reviewComments, issueComments] = await Promise.all([
              github.paginate(github.rest.pulls.listReviewComments, { owner, repo, pull_number: pr_number, per_page: 100 }),
              github.paginate(github.rest.issues.listComments, { owner, repo, issue_number: pr_number, per_page: 100 }),
            ]);
            const allComments = [...reviewComments, ...issueComments];
            
            const searchTerm = '‚ö†Ô∏è Potential issue';
            let potential_issues = 0;
            for (const c of allComments) {
              if (c.user?.type === 'Bot' && c.body?.includes(searchTerm)) {
                potential_issues++;
              }
            }
            core.info(`Found: ${potential_issues} potential issues.`);
            core.setOutput('potential_issues', String(potential_issues));

            if (potential_issues > 3) {
              core.setFailed(`Policy failed: Found ${potential_issues} 'Potential issue' comments (threshold is >3).`);
            }

      - name: Update Summary Comment
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            if (context.payload.check_run.pull_requests.length === 0) { return; }
            const pr_number = context.payload.check_run.pull_requests[0].number;
            const { owner, repo } = context.repo;
            const potential_issues = '${{ steps.evaluate.outputs.potential_issues }}';
            const conclusion = '${{ job.status }}';
            const signature = '';
            const body = `### üõ°Ô∏è Code Review Policy Gate\n\n` + `${signature}\n\n` + `**Result:** ${conclusion === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}\n\n` + `| Criterion | Count | Threshold |\n` + `|---|---|---|\n` + `| ‚ö†Ô∏è Potential Issues | **${potential_issues}** | Must be ‚â§ 3 |\n\n` + `*This check runs automatically after the main CodeRabbit review.*`;
            const comments = await github.paginate(github.rest.issues.listComments, { owner, repo, issue_number: pr_number });
            const botComment = comments.find(comment => comment.user.type === 'Bot' && comment.body.includes(signature));
            if (botComment) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: botComment.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number: pr_number, body });
            }

      - name: Add "READY TO MERGE" label
        if: success() && steps.evaluate.outputs.potential_issues == '0'
        uses: actions/github-script@v7
        with:
          script: |
            if (context.payload.check_run.pull_requests.length === 0) { return; }
            const pr_number = context.payload.check_run.pull_requests[0].number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const label_to_add = "READY TO MERGE";
            await github.rest.issues.addLabels({
              owner, repo, issue_number: pr_number, labels: [label_to_add]
            });
